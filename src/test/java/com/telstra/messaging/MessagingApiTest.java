/*
 * Telstra Messaging API
 * The Telstra Messaging API specification
 *
 * The version of the OpenAPI document: 2.2.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telstra.messaging;

import com.telstra.ApiException;
import com.telstra.models.GetMmsResponse;
import com.telstra.models.HealthCheckResponse;
import com.telstra.models.InboundPollResponse;
import com.telstra.models.MessageSentResponseMms;
import com.telstra.models.MessageSentResponseSms;
import com.telstra.models.OutboundPollResponse;
import com.telstra.models.SendMmsRequest;
import com.telstra.models.SendSMSRequest;
import com.telstra.models.SendSmsMultiRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MessagingApi
 */
@Ignore
public class MessagingApiTest {

    private final MessagingApi api = new MessagingApi();

    
    /**
     * Get MMS Status
     *
     * Get MMS Status
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMMSStatusTest() throws ApiException {
        String messageid = null;
        List<OutboundPollResponse> response = api.getMMSStatus(messageid);

        // TODO: test validations
    }
    
    /**
     * Get SMS Status
     *
     * If no notification URL has been specified, it is possible to poll for the message status.  Note that the &#x60;MessageId&#x60; that appears in the URL must be URL encoded. Just copying the &#x60;MessageId&#x60; as it was supplied when submitting the message may not work.  # SMS Status with Notification URL  When a message has reached its final state, the API will send a POST to the URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{     \&quot;to\&quot;: \&quot;+61418123456\&quot;,     \&quot;sentTimestamp\&quot;: \&quot;2017-03-17T10:05:22+10:00\&quot;,     \&quot;receivedTimestamp\&quot;: \&quot;2017-03-17T10:05:23+10:00\&quot;,     \&quot;messageId\&quot;: \&quot;1234567890ABCDEFGHIJKLNOPQRSTUVW\&quot;,     \&quot;deliveryStatus\&quot;: \&quot;DELIVRD\&quot;   } &lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | --- | ---| | &#x60;to&#x60; |  The number the message was sent to. | | &#x60;receivedTimestamp&#x60; | Time the message was sent to the API. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;deliveryStatus&#x60; | The final state of the message. | | &#x60;messageId&#x60; | The same reference that was returned when the original message was sent.| | &#x60;receivedTimestamp&#x60; | Time the message was sent to the API.|  Upon receiving this call it is expected that your servers will give a 204 (No Content) response. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSMSStatusTest() throws ApiException {
        String messageId = null;
        List<OutboundPollResponse> response = api.getSMSStatus(messageId);

        // TODO: test validations
    }
    
    /**
     * MMS Health Check
     *
     * Determine whether the MMS service is up or down. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void mMSHealthCheckTest() throws ApiException {
        HealthCheckResponse response = api.mMSHealthCheck();

        // TODO: test validations
    }
    
    /**
     * Retrieve MMS Replies
     *
     * Messages are retrieved one at a time, starting with the earliest reply.  If the subscription has a &#x60;notifyURL&#x60;, reply messages will be logged there instead, i.e. &#x60;GET&#x60; and reply &#x60;notifyURL&#x60; are exclusive.  # MMS Reply with Notification URL  When a reply is received, the API will send a POST to the subscription URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{   \&quot;to\&quot;: \&quot;+61418123456\&quot;,   \&quot;from\&quot;: \&quot;+61421987654\&quot;,   \&quot;sentTimestamp\&quot;: \&quot;2018-03-23T12:15:45+10:00\&quot;,   \&quot;messageId\&quot;: \&quot;XFRO1ApiA0000000111\&quot;,   \&quot;subject\&quot;: \&quot;Foo\&quot;,   \&quot;envelope\&quot;: \&quot;string\&quot;,   \&quot;MMSContent\&quot;:     [       {         \&quot;type\&quot;: \&quot;text/plain\&quot;,         \&quot;filename\&quot;: \&quot;text_1.txt\&quot;,         \&quot;payload\&quot;: \&quot;string\&quot;       },       {         \&quot;type\&quot;: \&quot;image/jpeg\&quot;,         \&quot;filename\&quot;: \&quot;sample.jpeg\&quot;,         \&quot;payload\&quot;: \&quot;string\&quot;       }     ] }&lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | --- | --- | | &#x60;to&#x60; |The number the message was sent to. | | &#x60;from&#x60; | The number the message was sent from. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;messageId&#x60; | Message Id assigned by the MMSC | | &#x60;subject&#x60; | The subject assigned to the message. | | &#x60;envelope&#x60; | Information about about terminal type and originating operator. | | &#x60;MMSContent&#x60; | An array of the actual content of the reply message. | | &#x60;type&#x60; | The content type of the message. | | &#x60;filename&#x60; | The filename for the message content. | | &#x60;payload&#x60; | The content of the message. | 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveMMSRepliesTest() throws ApiException {
        GetMmsResponse response = api.retrieveMMSReplies();

        // TODO: test validations
    }
    
    /**
     * Retrieve SMS Replies
     *
     * Messages are retrieved one at a time, starting with the earliest reply.  The API supports the encoding of emojis in the reply message. The emojis will be in their UTF-8 format.  If the subscription has a &#x60;notifyURL&#x60;, reply messages will be logged there instead.  # SMS Reply with Notification URL  When a reply is received, the API will send a POST to the subscription URL that has been previously specified.  &lt;pre&gt;&lt;code class&#x3D;\&quot;language-sh\&quot;&gt;{   \&quot;to\&quot;:\&quot;+61472880123\&quot;,   \&quot;from\&quot;:\&quot;+61412345678\&quot;,   \&quot;body\&quot;:\&quot;Foo4\&quot;,   \&quot;sentTimestamp\&quot;:\&quot;2018-04-20T14:24:35\&quot;,   \&quot;messageId\&quot;:\&quot;DMASApiA0000000146\&quot; }&lt;/code&gt;&lt;/pre&gt;  The fields are:  | Field | Description | | --- |--- | | &#x60;to&#x60; | The number the message was sent to. | | &#x60;from&#x60; | The number the message was sent from. | | &#x60;body&#x60; | The content of the SMS response. | | &#x60;sentTimestamp&#x60; | Time handling of the message ended. | | &#x60;messageId&#x60; | The ID assigned to the message. | 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveSMSRepliesTest() throws ApiException {
        InboundPollResponse response = api.retrieveSMSReplies();

        // TODO: test validations
    }
    
    /**
     * SMS Health Check
     *
     * Determine whether the SMS service is up or down. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sMSHealthCheckTest() throws ApiException {
        HealthCheckResponse response = api.sMSHealthCheck();

        // TODO: test validations
    }
    
    /**
     * Send Multiple SMS
     *
     * Send multiple SMS in one API call. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sMSMultiTest() throws ApiException {
        SendSmsMultiRequest payload = null;
        MessageSentResponseSms response = api.sMSMulti(payload);

        // TODO: test validations
    }
    
    /**
     * Send MMS
     *
     * Send MMS
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendMMSTest() throws ApiException {
        SendMmsRequest body = null;
        MessageSentResponseMms response = api.sendMMS(body);

        // TODO: test validations
    }
    
    /**
     * Send SMS
     *
     * Send an SMS Message to a single or multiple mobile number/s. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendSMSTest() throws ApiException {
        SendSMSRequest payload = null;
        MessageSentResponseSms response = api.sendSMS(payload);

        // TODO: test validations
    }
    
}

/*
 * Telstra Messaging API
 * The Telstra Messaging API specification
 *
 * The version of the OpenAPI document: 2.2.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telstra.messaging;

import com.telstra.ApiCallback;
import com.telstra.ApiClient;
import com.telstra.ApiException;
import com.telstra.ApiResponse;
import com.telstra.Configuration;
import com.telstra.Pair;
import com.telstra.ProgressRequestBody;
import com.telstra.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.telstra.models.OAuthResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenticationApi {
    private ApiClient localVarApiClient;

    public AuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for authToken
     * @param clientId  (required)
     * @param clientSecret  (required)
     * @param grantType  (required)
     * @param scope NSMS (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> unsupported_grant_type </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> invalid_client </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested URI does not exist </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service requested is currently unavailable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred when processing the request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authTokenCall(String clientId, String clientSecret, String grantType, String scope, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (clientSecret != null) {
            localVarFormParams.put("client_secret", clientSecret);
        }

        if (grantType != null) {
            localVarFormParams.put("grant_type", grantType);
        }

        if (scope != null) {
            localVarFormParams.put("scope", scope);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authTokenValidateBeforeCall(String clientId, String clientSecret, String grantType, String scope, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling authToken(Async)");
        }
        
        // verify the required parameter 'clientSecret' is set
        if (clientSecret == null) {
            throw new ApiException("Missing the required parameter 'clientSecret' when calling authToken(Async)");
        }
        
        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling authToken(Async)");
        }
        

        okhttp3.Call localVarCall = authTokenCall(clientId, clientSecret, grantType, scope, _callback);
        return localVarCall;

    }

    /**
     * Generate OAuth2 token
     * To generate an OAuth2 Authentication token, pass through your &#x60;Client key&#x60; and &#x60;Client secret&#x60; that you received when you registered for the **API Free Trial** Product.  The grant_type should be left as &#x60;client_credentials&#x60; and the scope as &#x60;NSMS&#x60;.  The token will expire in one hour. 
     * @param clientId  (required)
     * @param clientSecret  (required)
     * @param grantType  (required)
     * @param scope NSMS (optional)
     * @return OAuthResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> unsupported_grant_type </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> invalid_client </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested URI does not exist </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service requested is currently unavailable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred when processing the request </td><td>  -  </td></tr>
     </table>
     */
    public OAuthResponse authToken(String clientId, String clientSecret, String grantType, String scope) throws ApiException {
        ApiResponse<OAuthResponse> localVarResp = authTokenWithHttpInfo(clientId, clientSecret, grantType, scope);
        return localVarResp.getData();
    }

    /**
     * Generate OAuth2 token
     * To generate an OAuth2 Authentication token, pass through your &#x60;Client key&#x60; and &#x60;Client secret&#x60; that you received when you registered for the **API Free Trial** Product.  The grant_type should be left as &#x60;client_credentials&#x60; and the scope as &#x60;NSMS&#x60;.  The token will expire in one hour. 
     * @param clientId  (required)
     * @param clientSecret  (required)
     * @param grantType  (required)
     * @param scope NSMS (optional)
     * @return ApiResponse&lt;OAuthResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> unsupported_grant_type </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> invalid_client </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested URI does not exist </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service requested is currently unavailable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred when processing the request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuthResponse> authTokenWithHttpInfo(String clientId, String clientSecret, String grantType, String scope) throws ApiException {
        okhttp3.Call localVarCall = authTokenValidateBeforeCall(clientId, clientSecret, grantType, scope, null);
        Type localVarReturnType = new TypeToken<OAuthResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate OAuth2 token (asynchronously)
     * To generate an OAuth2 Authentication token, pass through your &#x60;Client key&#x60; and &#x60;Client secret&#x60; that you received when you registered for the **API Free Trial** Product.  The grant_type should be left as &#x60;client_credentials&#x60; and the scope as &#x60;NSMS&#x60;.  The token will expire in one hour. 
     * @param clientId  (required)
     * @param clientSecret  (required)
     * @param grantType  (required)
     * @param scope NSMS (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> unsupported_grant_type </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> invalid_client </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested URI does not exist </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The service requested is currently unavailable </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An internal error occurred when processing the request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authTokenAsync(String clientId, String clientSecret, String grantType, String scope, final ApiCallback<OAuthResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = authTokenValidateBeforeCall(clientId, clientSecret, grantType, scope, _callback);
        Type localVarReturnType = new TypeToken<OAuthResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}

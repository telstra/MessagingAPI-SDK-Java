/*
 * Telstra Messaging API
 * The Telstra Messaging API specification
 *
 * The version of the OpenAPI document: 2.2.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telstra.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.telstra.models.MessageMulti;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * SendSmsMultiRequest
 */

public class SendSmsMultiRequest {
  public static final String SERIALIZED_NAME_SMS_MULTI = "smsMulti";
  @SerializedName(SERIALIZED_NAME_SMS_MULTI)
  private List<MessageMulti> smsMulti = null;

  public static final String SERIALIZED_NAME_NOTIFY_U_R_L = "notifyURL";
  @SerializedName(SERIALIZED_NAME_NOTIFY_U_R_L)
  private String notifyURL;


  public SendSmsMultiRequest smsMulti(List<MessageMulti> smsMulti) {
    
    this.smsMulti = smsMulti;
    return this;
  }

  public SendSmsMultiRequest addSmsMultiItem(MessageMulti smsMultiItem) {
    if (this.smsMulti == null) {
      this.smsMulti = new ArrayList<MessageMulti>();
    }
    this.smsMulti.add(smsMultiItem);
    return this;
  }

   /**
   * Multiple SMS. Up to 10 messages can be sent in one API call.
   * @return smsMulti
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Multiple SMS. Up to 10 messages can be sent in one API call.")

  public List<MessageMulti> getSmsMulti() {
    return smsMulti;
  }


  public void setSmsMulti(List<MessageMulti> smsMulti) {
    this.smsMulti = smsMulti;
  }


  public SendSmsMultiRequest notifyURL(String notifyURL) {
    
    this.notifyURL = notifyURL;
    return this;
  }

   /**
   * Contains a URL that will be called once your message has been processed. The status may be delivered, expired, deleted, etc. Please refer to the Delivery Status section for more information.  If you are using a domain URL you must include the forward slash at the end of the URL (e.g. http://www.example.com/).  This is required when &#x60;\&quot;receiptOff\&quot;&#x60; is missing or &#x60;\&quot;receiptOff\&quot;:\&quot;false\&quot;&#x60;. 
   * @return notifyURL
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "http://www.example.com/", value = "Contains a URL that will be called once your message has been processed. The status may be delivered, expired, deleted, etc. Please refer to the Delivery Status section for more information.  If you are using a domain URL you must include the forward slash at the end of the URL (e.g. http://www.example.com/).  This is required when `\"receiptOff\"` is missing or `\"receiptOff\":\"false\"`. ")

  public String getNotifyURL() {
    return notifyURL;
  }


  public void setNotifyURL(String notifyURL) {
    this.notifyURL = notifyURL;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendSmsMultiRequest sendSmsMultiRequest = (SendSmsMultiRequest) o;
    return Objects.equals(this.smsMulti, sendSmsMultiRequest.smsMulti) &&
        Objects.equals(this.notifyURL, sendSmsMultiRequest.notifyURL);
  }

  @Override
  public int hashCode() {
    return Objects.hash(smsMulti, notifyURL);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendSmsMultiRequest {\n");
    sb.append("    smsMulti: ").append(toIndentedString(smsMulti)).append("\n");
    sb.append("    notifyURL: ").append(toIndentedString(notifyURL)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}


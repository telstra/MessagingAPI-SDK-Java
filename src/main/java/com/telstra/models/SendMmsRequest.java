/*
 * Telstra Messaging API
 * The Telstra Messaging API specification
 *
 * The version of the OpenAPI document: 2.2.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.telstra.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.telstra.models.MMSContent;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * SendMmsRequest
 */

public class SendMmsRequest {
  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_REPLY_REQUEST = "replyRequest";
  @SerializedName(SERIALIZED_NAME_REPLY_REQUEST)
  private Boolean replyRequest;

  public static final String SERIALIZED_NAME_NOTIFY_U_R_L = "notifyURL";
  @SerializedName(SERIALIZED_NAME_NOTIFY_U_R_L)
  private String notifyURL;

  public static final String SERIALIZED_NAME_MM_S_CONTENT = "MMSContent";
  @SerializedName(SERIALIZED_NAME_MM_S_CONTENT)
  private List<MMSContent> mmSContent = new ArrayList<MMSContent>();


  public SendMmsRequest to(String to) {
    
    this.to = to;
    return this;
  }

   /**
   * This is the destination address. Can be an array of strings if sending to multiple numbers: \&quot;to\&quot;:[\&quot;+61412345678\&quot;, \&quot;+61418765432\&quot;] 
   * @return to
  **/
  @ApiModelProperty(example = "", required = true, value = "This is the destination address. Can be an array of strings if sending to multiple numbers: \"to\":[\"+61412345678\", \"+61418765432\"] ")

  public String getTo() {
    return to;
  }


  public void setTo(String to) {
    this.to = to;
  }


  public SendMmsRequest from(String from) {
    
    this.from = from;
    return this;
  }

   /**
   * This will be the source address that will be displayed on the receiving device. You can set an Alphanumeric sender ID of up to 11 characters that the MMS was sent from. Phone numbers in the &#x60;from&#x60; attribute will be blocked (400-error) to prevent number spoofing.  Most standard ASCII characters are accepted in the alphanumeric &#x60;from&#x60; attribute, however there are some limitations. The following limitations and characters are allowed in the alphanumeric &#x60;from&#x60; attribute; any alphabetic character (e.g. &#x60;abc&#x60;), any number mixed with alphabetic characters (e.g. &#x60;123abc&#x60;), uppercase and lowercase characters (e.g. &#x60;aBc&#x60;), any of the following special characters mixed with alphabetic characters are allowed; &#x60;~!@#$%^&amp;*()~_~+-&#x3D;{}|[];&#39;?,./&#x60; (e.g. &#x60;abc~!@&#x60;), any combination of lowercase, uppercase, numeric or allowed special characters (e.g. &#x60;abc@#123DE&#x60;). All other characters, including spaces and extended ASCII characters, are not allowed (e.g. &#x60;&lt;&gt;:\&quot;\\&#x60;).  If attribute is not present, the service will use the mobile number associated with the application (in E.164 format).  If &#x60;replyRequest&#x60; is set to true, this field should not be present.  This feature is only available on Telstra Account paid plans, not through Free Trials or credit card paid plans.   *Please note:*  *- Alphanumeric sender ID works for domestic, i.e. Australian, destinations only.*  *- When Alphanumeric sender ID is used in sending MMS, Delivery Reports will NOT be returned.* 
   * @return from
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This will be the source address that will be displayed on the receiving device. You can set an Alphanumeric sender ID of up to 11 characters that the MMS was sent from. Phone numbers in the `from` attribute will be blocked (400-error) to prevent number spoofing.  Most standard ASCII characters are accepted in the alphanumeric `from` attribute, however there are some limitations. The following limitations and characters are allowed in the alphanumeric `from` attribute; any alphabetic character (e.g. `abc`), any number mixed with alphabetic characters (e.g. `123abc`), uppercase and lowercase characters (e.g. `aBc`), any of the following special characters mixed with alphabetic characters are allowed; `~!@#$%^&*()~_~+-={}|[];'?,./` (e.g. `abc~!@`), any combination of lowercase, uppercase, numeric or allowed special characters (e.g. `abc@#123DE`). All other characters, including spaces and extended ASCII characters, are not allowed (e.g. `<>:\"\\`).  If attribute is not present, the service will use the mobile number associated with the application (in E.164 format).  If `replyRequest` is set to true, this field should not be present.  This feature is only available on Telstra Account paid plans, not through Free Trials or credit card paid plans.   *Please note:*  *- Alphanumeric sender ID works for domestic, i.e. Australian, destinations only.*  *- When Alphanumeric sender ID is used in sending MMS, Delivery Reports will NOT be returned.* ")

  public String getFrom() {
    return from;
  }


  public void setFrom(String from) {
    this.from = from;
  }


  public SendMmsRequest subject(String subject) {
    
    this.subject = subject;
    return this;
  }

   /**
   * The subject that will be used in an MMS message. Subject is limited to maximum of 64 characters.  Some special characters need to be encoded if used in the &#x60;subject&#x60; field (e.g. &amp;amp;amp; for &amp; and &amp;amp;lt; for &lt;). 
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The subject that will be used in an MMS message. Subject is limited to maximum of 64 characters.  Some special characters need to be encoded if used in the `subject` field (e.g. &amp;amp; for & and &amp;lt; for <). ")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    this.subject = subject;
  }


  public SendMmsRequest replyRequest(Boolean replyRequest) {
    
    this.replyRequest = replyRequest;
    return this;
  }

   /**
   * If set to true, the reply message functionality will be implemented. The &#x60;from&#x60; field should not be present. 
   * @return replyRequest
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "If set to true, the reply message functionality will be implemented. The `from` field should not be present. ")

  public Boolean getReplyRequest() {
    return replyRequest;
  }


  public void setReplyRequest(Boolean replyRequest) {
    this.replyRequest = replyRequest;
  }


  public SendMmsRequest notifyURL(String notifyURL) {
    
    this.notifyURL = notifyURL;
    return this;
  }

   /**
   * Contains a URL that will be called once your message has been processed. The status may be delivered, expired, deleted, etc. Please refer to the Delivery Status section for more information.  If you are using a domain URL you must include the forward slash at the end of the URL (e.g. http://www.example.com/). 
   * @return notifyURL
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "http://www.example.com/", value = "Contains a URL that will be called once your message has been processed. The status may be delivered, expired, deleted, etc. Please refer to the Delivery Status section for more information.  If you are using a domain URL you must include the forward slash at the end of the URL (e.g. http://www.example.com/). ")

  public String getNotifyURL() {
    return notifyURL;
  }


  public void setNotifyURL(String notifyURL) {
    this.notifyURL = notifyURL;
  }


  public SendMmsRequest mmSContent(List<MMSContent> mmSContent) {
    
    this.mmSContent = mmSContent;
    return this;
  }

  public SendMmsRequest addMmSContentItem(MMSContent mmSContentItem) {
    this.mmSContent.add(mmSContentItem);
    return this;
  }

   /**
   * An array of content that will be sent in an MMS message. If this array is present it will cause the &#x60;body&#x60; element to be ignored, and the message will be sent as an MMS. 
   * @return mmSContent
  **/
  @ApiModelProperty(required = true, value = "An array of content that will be sent in an MMS message. If this array is present it will cause the `body` element to be ignored, and the message will be sent as an MMS. ")

  public List<MMSContent> getMmSContent() {
    return mmSContent;
  }


  public void setMmSContent(List<MMSContent> mmSContent) {
    this.mmSContent = mmSContent;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendMmsRequest sendMmsRequest = (SendMmsRequest) o;
    return Objects.equals(this.to, sendMmsRequest.to) &&
        Objects.equals(this.from, sendMmsRequest.from) &&
        Objects.equals(this.subject, sendMmsRequest.subject) &&
        Objects.equals(this.replyRequest, sendMmsRequest.replyRequest) &&
        Objects.equals(this.notifyURL, sendMmsRequest.notifyURL) &&
        Objects.equals(this.mmSContent, sendMmsRequest.mmSContent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(to, from, subject, replyRequest, notifyURL, mmSContent);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendMmsRequest {\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    replyRequest: ").append(toIndentedString(replyRequest)).append("\n");
    sb.append("    notifyURL: ").append(toIndentedString(notifyURL)).append("\n");
    sb.append("    mmSContent: ").append(toIndentedString(mmSContent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

